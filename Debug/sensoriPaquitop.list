
sensoriPaquitop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a64  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002b84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002b84  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009499  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183d  00000000  00000000  000294cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002ad10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6eb  00000000  00000000  0002bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d9e  00000000  00000000  000476c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b55d0  00000000  00000000  00051461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106a31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002234  00000000  00000000  00106a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002b08 	.word	0x08002b08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002b08 	.word	0x08002b08

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fae6 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f848 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f942 	bl	80004b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022c:	f000 f88c 	bl	8000348 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000230:	f000 f8f6 	bl	8000420 <MX_FDCAN1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);/* USER CODE BEGIN MX_GPIO_Init_2 */
 8000234:	23a0      	movs	r3, #160	; 0xa0
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2201      	movs	r2, #1
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	0018      	movs	r0, r3
 800023e:	f001 fcb3 	bl	8001ba8 <HAL_GPIO_WritePin>
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <main+0x90>)
 8000244:	2200      	movs	r2, #0
 8000246:	605a      	str	r2, [r3, #4]
	   TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <main+0x90>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
	   TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <main+0x90>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
	   TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <main+0x90>)
 8000256:	2200      	movs	r2, #0
 8000258:	615a      	str	r2, [r3, #20]
	   TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <main+0x90>)
 800025c:	2200      	movs	r2, #0
 800025e:	619a      	str	r2, [r3, #24]
	   TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <main+0x90>)
 8000262:	2200      	movs	r2, #0
 8000264:	61da      	str	r2, [r3, #28]
	   TxHeader.MessageMarker = 0;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <main+0x90>)
 8000268:	2200      	movs	r2, #0
 800026a:	621a      	str	r2, [r3, #32]
	   TxHeader.Identifier = 20;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <main+0x90>)
 800026e:	2214      	movs	r2, #20
 8000270:	601a      	str	r2, [r3, #0]

	 TxData[0] = 10;
 8000272:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <main+0x94>)
 8000274:	220a      	movs	r2, #10
 8000276:	701a      	strb	r2, [r3, #0]
	 TxData[1] = 20;
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <main+0x94>)
 800027a:	2214      	movs	r2, #20
 800027c:	705a      	strb	r2, [r3, #1]
	 TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <main+0x90>)
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	0292      	lsls	r2, r2, #10
 8000284:	60da      	str	r2, [r3, #12]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <main+0x94>)
 8000288:	4908      	ldr	r1, [pc, #32]	; (80002ac <main+0x90>)
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <main+0x98>)
 800028c:	0018      	movs	r0, r3
 800028e:	f001 f9f1 	bl	8001674 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000292:	1e03      	subs	r3, r0, #0
 8000294:	d001      	beq.n	800029a <main+0x7e>
	          Error_Handler();
 8000296:	f000 f95b 	bl	8000550 <Error_Handler>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);/* USER CODE BEGIN MX_GPIO_Init_2 */
 800029a:	23a0      	movs	r3, #160	; 0xa0
 800029c:	05db      	lsls	r3, r3, #23
 800029e:	2200      	movs	r2, #0
 80002a0:	2140      	movs	r1, #64	; 0x40
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fc80 	bl	8001ba8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);/* USER CODE BEGIN MX_GPIO_Init_2 */
 80002a8:	e7c4      	b.n	8000234 <main+0x18>
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	200000f0 	.word	0x200000f0
 80002b0:	20000114 	.word	0x20000114
 80002b4:	2000008c 	.word	0x2000008c

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b095      	sub	sp, #84	; 0x54
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	233c      	movs	r3, #60	; 0x3c
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 fc15 	bl	8002af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2310      	movs	r3, #16
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 fc0e 	bl	8002af8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 fc7f 	bl	8001be4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	0052      	lsls	r2, r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2240      	movs	r2, #64	; 0x40
 80002fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	193b      	adds	r3, r7, r4
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	193b      	adds	r3, r7, r4
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fcab 	bl	8001c64 <HAL_RCC_OscConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000312:	f000 f91d 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2100      	movs	r1, #0
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fff6 	bl	8002324 <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800033c:	f000 f908 	bl	8000550 <Error_Handler>
  }
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b015      	add	sp, #84	; 0x54
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	0018      	movs	r0, r3
 8000352:	230c      	movs	r3, #12
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f002 fbce 	bl	8002af8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800035c:	4b2d      	ldr	r3, [pc, #180]	; (8000414 <MX_ADC1_Init+0xcc>)
 800035e:	4a2e      	ldr	r2, [pc, #184]	; (8000418 <MX_ADC1_Init+0xd0>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <MX_ADC1_Init+0xcc>)
 8000364:	2280      	movs	r2, #128	; 0x80
 8000366:	05d2      	lsls	r2, r2, #23
 8000368:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800036a:	4b2a      	ldr	r3, [pc, #168]	; (8000414 <MX_ADC1_Init+0xcc>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000370:	4b28      	ldr	r3, [pc, #160]	; (8000414 <MX_ADC1_Init+0xcc>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037c:	4b25      	ldr	r3, [pc, #148]	; (8000414 <MX_ADC1_Init+0xcc>)
 800037e:	2204      	movs	r2, #4
 8000380:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000382:	4b24      	ldr	r3, [pc, #144]	; (8000414 <MX_ADC1_Init+0xcc>)
 8000384:	2200      	movs	r2, #0
 8000386:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <MX_ADC1_Init+0xcc>)
 800038a:	2200      	movs	r2, #0
 800038c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800038e:	4b21      	ldr	r3, [pc, #132]	; (8000414 <MX_ADC1_Init+0xcc>)
 8000390:	2200      	movs	r2, #0
 8000392:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <MX_ADC1_Init+0xcc>)
 8000396:	2201      	movs	r2, #1
 8000398:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <MX_ADC1_Init+0xcc>)
 800039c:	2220      	movs	r2, #32
 800039e:	2100      	movs	r1, #0
 80003a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a8:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003b0:	222c      	movs	r2, #44	; 0x2c
 80003b2:	2100      	movs	r1, #0
 80003b4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003ca:	223c      	movs	r2, #60	; 0x3c
 80003cc:	2100      	movs	r1, #0
 80003ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fbb1 	bl	8000b40 <HAL_ADC_Init>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003e2:	f000 f8b5 	bl	8000550 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4a0c      	ldr	r2, [pc, #48]	; (800041c <MX_ADC1_Init+0xd4>)
 80003ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f8:	1d3a      	adds	r2, r7, #4
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fd46 	bl	8000e90 <HAL_ADC_ConfigChannel>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000408:	f000 f8a2 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028
 8000418:	40012400 	.word	0x40012400
 800041c:	24000200 	.word	0x24000200

08000420 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <MX_FDCAN1_Init+0x8c>)
 8000428:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800043c:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800043e:	2200      	movs	r2, #0
 8000440:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000444:	2201      	movs	r2, #1
 8000446:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800044a:	2200      	movs	r2, #0
 800044c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000450:	2208      	movs	r2, #8
 8000452:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000456:	2201      	movs	r2, #1
 8000458:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800045c:	220d      	movs	r2, #13
 800045e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000462:	2202      	movs	r2, #2
 8000464:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000468:	2201      	movs	r2, #1
 800046a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800046c:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800046e:	2201      	movs	r2, #1
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000474:	2201      	movs	r2, #1
 8000476:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800047a:	2201      	movs	r2, #1
 800047c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000480:	2200      	movs	r2, #0
 8000482:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000486:	2200      	movs	r2, #0
 8000488:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 800048c:	2200      	movs	r2, #0
 800048e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MX_FDCAN1_Init+0x88>)
 8000492:	0018      	movs	r0, r3
 8000494:	f000 ff88 	bl	80013a8 <HAL_FDCAN_Init>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800049c:	f000 f858 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	2000008c 	.word	0x2000008c
 80004ac:	40006400 	.word	0x40006400

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	240c      	movs	r4, #12
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2314      	movs	r3, #20
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f002 fb19 	bl	8002af8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <MX_GPIO_Init+0x9c>)
 80004c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ca:	4b20      	ldr	r3, [pc, #128]	; (800054c <MX_GPIO_Init+0x9c>)
 80004cc:	2102      	movs	r1, #2
 80004ce:	430a      	orrs	r2, r1
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <MX_GPIO_Init+0x9c>)
 80004d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d6:	2202      	movs	r2, #2
 80004d8:	4013      	ands	r3, r2
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <MX_GPIO_Init+0x9c>)
 80004e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <MX_GPIO_Init+0x9c>)
 80004e4:	2104      	movs	r1, #4
 80004e6:	430a      	orrs	r2, r1
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <MX_GPIO_Init+0x9c>)
 80004ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ee:	2204      	movs	r2, #4
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_GPIO_Init+0x9c>)
 80004f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_GPIO_Init+0x9c>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	430a      	orrs	r2, r1
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_GPIO_Init+0x9c>)
 8000504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000506:	2201      	movs	r2, #1
 8000508:	4013      	ands	r3, r2
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800050e:	23a0      	movs	r3, #160	; 0xa0
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	2200      	movs	r2, #0
 8000514:	2140      	movs	r1, #64	; 0x40
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fb46 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800051c:	0021      	movs	r1, r4
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2240      	movs	r2, #64	; 0x40
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2201      	movs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000536:	187a      	adds	r2, r7, r1
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f001 f9c6 	bl	80018d0 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b009      	add	sp, #36	; 0x24
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	40021000 	.word	0x40021000

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000558:	23a0      	movs	r3, #160	; 0xa0
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	2201      	movs	r2, #1
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fb21 	bl	8001ba8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 f9c8 	bl	80008fc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800056c:	23a0      	movs	r3, #160	; 0xa0
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2200      	movs	r2, #0
 8000572:	2140      	movs	r1, #64	; 0x40
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fb17 	bl	8001ba8 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 800057a:	20c8      	movs	r0, #200	; 0xc8
 800057c:	f000 f9be 	bl	80008fc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000580:	e7ea      	b.n	8000558 <Error_Handler+0x8>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x44>)
 800058c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_MspInit+0x44>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_MspInit+0x44>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_MspInit+0x44>)
 80005a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_MspInit+0x44>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0549      	lsls	r1, r1, #21
 80005ac:	430a      	orrs	r2, r1
 80005ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_MspInit+0x44>)
 80005b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	055b      	lsls	r3, r3, #21
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b08b      	sub	sp, #44	; 0x2c
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	2414      	movs	r4, #20
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	0018      	movs	r0, r3
 80005da:	2314      	movs	r3, #20
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f002 fa8a 	bl	8002af8 <memset>
  if(hadc->Instance==ADC1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a17      	ldr	r2, [pc, #92]	; (8000648 <HAL_ADC_MspInit+0x7c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d128      	bne.n	8000640 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_ADC_MspInit+0x80>)
 80005f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_ADC_MspInit+0x80>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	0349      	lsls	r1, r1, #13
 80005f8:	430a      	orrs	r2, r1
 80005fa:	641a      	str	r2, [r3, #64]	; 0x40
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <HAL_ADC_MspInit+0x80>)
 80005fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	035b      	lsls	r3, r3, #13
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_ADC_MspInit+0x80>)
 800060c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_ADC_MspInit+0x80>)
 8000610:	2102      	movs	r1, #2
 8000612:	430a      	orrs	r2, r1
 8000614:	635a      	str	r2, [r3, #52]	; 0x34
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <HAL_ADC_MspInit+0x80>)
 8000618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061a:	2202      	movs	r2, #2
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2203      	movs	r2, #3
 8000626:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2203      	movs	r2, #3
 800062c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	193b      	adds	r3, r7, r4
 8000636:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_ADC_MspInit+0x84>)
 8000638:	0019      	movs	r1, r3
 800063a:	0010      	movs	r0, r2
 800063c:	f001 f948 	bl	80018d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b00b      	add	sp, #44	; 0x2c
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	40012400 	.word	0x40012400
 800064c:	40021000 	.word	0x40021000
 8000650:	50000400 	.word	0x50000400

08000654 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b09f      	sub	sp, #124	; 0x7c
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	0018      	movs	r0, r3
 8000662:	2314      	movs	r3, #20
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f002 fa46 	bl	8002af8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	2418      	movs	r4, #24
 800066e:	193b      	adds	r3, r7, r4
 8000670:	0018      	movs	r0, r3
 8000672:	234c      	movs	r3, #76	; 0x4c
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f002 fa3e 	bl	8002af8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a35      	ldr	r2, [pc, #212]	; (8000758 <HAL_FDCAN_MspInit+0x104>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d164      	bne.n	8000750 <HAL_FDCAN_MspInit+0xfc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0492      	lsls	r2, r2, #18
 800068c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	f001 ffce 	bl	8002638 <HAL_RCCEx_PeriphCLKConfig>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80006a0:	f7ff ff56 	bl	8000550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006a4:	4b2d      	ldr	r3, [pc, #180]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	0149      	lsls	r1, r1, #5
 80006ae:	430a      	orrs	r2, r1
 80006b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	015b      	lsls	r3, r3, #5
 80006ba:	4013      	ands	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006c6:	2102      	movs	r1, #2
 80006c8:	430a      	orrs	r2, r1
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d0:	2202      	movs	r2, #2
 80006d2:	4013      	ands	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006de:	2101      	movs	r1, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	635a      	str	r2, [r3, #52]	; 0x34
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <HAL_FDCAN_MspInit+0x108>)
 80006e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e8:	2201      	movs	r2, #1
 80006ea:	4013      	ands	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB9     ------> FDCAN1_TX
    PA11 [PA9]     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006f0:	2164      	movs	r1, #100	; 0x64
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0092      	lsls	r2, r2, #2
 80006f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	000c      	movs	r4, r1
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2202      	movs	r2, #2
 8000700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2203      	movs	r2, #3
 8000712:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	193b      	adds	r3, r7, r4
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <HAL_FDCAN_MspInit+0x10c>)
 8000718:	0019      	movs	r1, r3
 800071a:	0010      	movs	r0, r2
 800071c:	f001 f8d8 	bl	80018d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2203      	movs	r2, #3
 8000740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	187a      	adds	r2, r7, r1
 8000744:	23a0      	movs	r3, #160	; 0xa0
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f001 f8c0 	bl	80018d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b01f      	add	sp, #124	; 0x7c
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	40006400 	.word	0x40006400
 800075c:	40021000 	.word	0x40021000
 8000760:	50000400 	.word	0x50000400

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 f89c 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a0:	f7ff fff7 	bl	8000792 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	; (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ca:	f002 f971 	bl	8002ab0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007ce:	f7ff fd25 	bl	800021c <main>

080007d2 <LoopForever>:

LoopForever:
  b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   r0, =_estack
 80007d4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e0:	08002b78 	.word	0x08002b78
  ldr r2, =_sbss
 80007e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e8:	20000120 	.word	0x20000120

080007ec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_COMP_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_Init+0x3c>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_Init+0x3c>)
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	0049      	lsls	r1, r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080a:	2003      	movs	r0, #3
 800080c:	f000 f810 	bl	8000830 <HAL_InitTick>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d003      	beq.n	800081c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
 800081a:	e001      	b.n	8000820 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff feb2 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000838:	230f      	movs	r3, #15
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <HAL_InitTick+0x88>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d02b      	beq.n	80008a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_InitTick+0x8c>)
 800084a:	681c      	ldr	r4, [r3, #0]
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_InitTick+0x88>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	0019      	movs	r1, r3
 8000852:	23fa      	movs	r3, #250	; 0xfa
 8000854:	0098      	lsls	r0, r3, #2
 8000856:	f7ff fc55 	bl	8000104 <__udivsi3>
 800085a:	0003      	movs	r3, r0
 800085c:	0019      	movs	r1, r3
 800085e:	0020      	movs	r0, r4
 8000860:	f7ff fc50 	bl	8000104 <__udivsi3>
 8000864:	0003      	movs	r3, r0
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fd91 	bl	800138e <HAL_SYSTICK_Config>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d112      	bne.n	8000896 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d80a      	bhi.n	800088c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	2301      	movs	r3, #1
 800087a:	425b      	negs	r3, r3
 800087c:	2200      	movs	r2, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fd70 	bl	8001364 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_InitTick+0x90>)
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e00d      	b.n	80008a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800088c:	230f      	movs	r3, #15
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	e008      	b.n	80008a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000896:	230f      	movs	r3, #15
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e003      	b.n	80008a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a0:	230f      	movs	r3, #15
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008a8:	230f      	movs	r3, #15
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	781b      	ldrb	r3, [r3, #0]
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b005      	add	sp, #20
 80008b4:	bd90      	pop	{r4, r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	001a      	movs	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	18d2      	adds	r2, r2, r3
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000008 	.word	0x20000008
 80008e4:	2000011c 	.word	0x2000011c

080008e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	2000011c 	.word	0x2000011c

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000904:	f7ff fff0 	bl	80008e8 <HAL_GetTick>
 8000908:	0003      	movs	r3, r0
 800090a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3301      	adds	r3, #1
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Delay+0x44>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	001a      	movs	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	189b      	adds	r3, r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	f7ff ffe0 	bl	80008e8 <HAL_GetTick>
 8000928:	0002      	movs	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
  {
  }
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b004      	add	sp, #16
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000008 	.word	0x20000008

08000944 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000954:	401a      	ands	r2, r3
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	431a      	orrs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	fe3fffff 	.word	0xfe3fffff

0800096c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	23e0      	movs	r3, #224	; 0xe0
 800097a:	045b      	lsls	r3, r3, #17
 800097c:	4013      	ands	r3, r2
}
 800097e:	0018      	movs	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}

08000986 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b084      	sub	sp, #16
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	2104      	movs	r1, #4
 800099a:	400a      	ands	r2, r1
 800099c:	2107      	movs	r1, #7
 800099e:	4091      	lsls	r1, r2
 80009a0:	000a      	movs	r2, r1
 80009a2:	43d2      	mvns	r2, r2
 80009a4:	401a      	ands	r2, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2104      	movs	r1, #4
 80009aa:	400b      	ands	r3, r1
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4099      	lsls	r1, r3
 80009b0:	000b      	movs	r3, r1
 80009b2:	431a      	orrs	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b004      	add	sp, #16
 80009be:	bd80      	pop	{r7, pc}

080009c0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	2104      	movs	r1, #4
 80009d2:	400a      	ands	r2, r1
 80009d4:	2107      	movs	r1, #7
 80009d6:	4091      	lsls	r1, r2
 80009d8:	000a      	movs	r2, r1
 80009da:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	2104      	movs	r1, #4
 80009e0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009e2:	40da      	lsrs	r2, r3
 80009e4:	0013      	movs	r3, r2
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}

080009ee <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	211f      	movs	r1, #31
 8000a02:	400a      	ands	r2, r1
 8000a04:	210f      	movs	r1, #15
 8000a06:	4091      	lsls	r1, r2
 8000a08:	000a      	movs	r2, r1
 8000a0a:	43d2      	mvns	r2, r2
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	0e9b      	lsrs	r3, r3, #26
 8000a12:	210f      	movs	r1, #15
 8000a14:	4019      	ands	r1, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	201f      	movs	r0, #31
 8000a1a:	4003      	ands	r3, r0
 8000a1c:	4099      	lsls	r1, r3
 8000a1e:	000b      	movs	r3, r1
 8000a20:	431a      	orrs	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b004      	add	sp, #16
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	035b      	lsls	r3, r3, #13
 8000a40:	0b5b      	lsrs	r3, r3, #13
 8000a42:	431a      	orrs	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	0352      	lsls	r2, r2, #13
 8000a62:	0b52      	lsrs	r2, r2, #13
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	401a      	ands	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b002      	add	sp, #8
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	0212      	lsls	r2, r2, #8
 8000a88:	43d2      	mvns	r2, r2
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	400b      	ands	r3, r1
 8000a94:	4904      	ldr	r1, [pc, #16]	; (8000aa8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a96:	400b      	ands	r3, r1
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	07ffff00 	.word	0x07ffff00

08000aac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	0552      	lsls	r2, r2, #21
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	6fffffe8 	.word	0x6fffffe8

08000ad4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	055b      	lsls	r3, r3, #21
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	055b      	lsls	r3, r3, #21
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d101      	bne.n	8000af2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}

08000afc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d101      	bne.n	8000b14 <LL_ADC_IsEnabled+0x18>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <LL_ADC_IsEnabled+0x1a>
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d101      	bne.n	8000b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b48:	231f      	movs	r3, #31
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e17f      	b.n	8000e66 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10a      	bne.n	8000b84 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fd2b 	bl	80005cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2254      	movs	r2, #84	; 0x54
 8000b80:	2100      	movs	r1, #0
 8000b82:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ffa3 	bl	8000ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d115      	bne.n	8000bbe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff ff88 	bl	8000aac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b9c:	4bb4      	ldr	r3, [pc, #720]	; (8000e70 <HAL_ADC_Init+0x330>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	49b4      	ldr	r1, [pc, #720]	; (8000e74 <HAL_ADC_Init+0x334>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff faae 	bl	8000104 <__udivsi3>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	3301      	adds	r3, #1
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bb0:	e002      	b.n	8000bb8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f9      	bne.n	8000bb2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff ff86 	bl	8000ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d10f      	bne.n	8000bec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bdc:	2201      	movs	r2, #1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000be4:	231f      	movs	r3, #31
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ff94 	bl	8000b1e <LL_ADC_REG_IsConversionOngoing>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	2210      	movs	r2, #16
 8000c00:	4013      	ands	r3, r2
 8000c02:	d000      	beq.n	8000c06 <HAL_ADC_Init+0xc6>
 8000c04:	e122      	b.n	8000e4c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d000      	beq.n	8000c0e <HAL_ADC_Init+0xce>
 8000c0c:	e11e      	b.n	8000e4c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a99      	ldr	r2, [pc, #612]	; (8000e78 <HAL_ADC_Init+0x338>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	2202      	movs	r2, #2
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff ff6a 	bl	8000afc <LL_ADC_IsEnabled>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d000      	beq.n	8000c2e <HAL_ADC_Init+0xee>
 8000c2c:	e0ad      	b.n	8000d8a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7e1b      	ldrb	r3, [r3, #24]
 8000c36:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c38:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7e5b      	ldrb	r3, [r3, #25]
 8000c3e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c40:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7e9b      	ldrb	r3, [r3, #26]
 8000c46:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c48:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <HAL_ADC_Init+0x118>
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	015b      	lsls	r3, r3, #5
 8000c56:	e000      	b.n	8000c5a <HAL_ADC_Init+0x11a>
 8000c58:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c5a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c60:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da04      	bge.n	8000c74 <HAL_ADC_Init+0x134>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	085b      	lsrs	r3, r3, #1
 8000c72:	e001      	b.n	8000c78 <HAL_ADC_Init+0x138>
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000c78:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	212c      	movs	r1, #44	; 0x2c
 8000c7e:	5c5b      	ldrb	r3, [r3, r1]
 8000c80:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c82:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	5c9b      	ldrb	r3, [r3, r2]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d115      	bne.n	8000cc0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e9b      	ldrb	r3, [r3, #26]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d105      	bne.n	8000ca8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	0252      	lsls	r2, r2, #9
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	e00b      	b.n	8000cc0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cac:	2220      	movs	r2, #32
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb8:	2201      	movs	r2, #1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00a      	beq.n	8000cde <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ccc:	23e0      	movs	r3, #224	; 0xe0
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	4a65      	ldr	r2, [pc, #404]	; (8000e7c <HAL_ADC_Init+0x33c>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	0f9b      	lsrs	r3, r3, #30
 8000cfa:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d00:	4313      	orrs	r3, r2
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	223c      	movs	r2, #60	; 0x3c
 8000d0c:	5c9b      	ldrb	r3, [r3, r2]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d111      	bne.n	8000d36 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	0f9b      	lsrs	r3, r3, #30
 8000d18:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d1e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000d24:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000d2a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2201      	movs	r2, #1
 8000d32:	4313      	orrs	r3, r2
 8000d34:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	4a50      	ldr	r2, [pc, #320]	; (8000e80 <HAL_ADC_Init+0x340>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	0019      	movs	r1, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	23c0      	movs	r3, #192	; 0xc0
 8000d52:	061b      	lsls	r3, r3, #24
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d018      	beq.n	8000d8a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d012      	beq.n	8000d8a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	061b      	lsls	r3, r3, #24
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d00c      	beq.n	8000d8a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d70:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <HAL_ADC_Init+0x344>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a44      	ldr	r2, [pc, #272]	; (8000e88 <HAL_ADC_Init+0x348>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	0019      	movs	r1, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	23f0      	movs	r3, #240	; 0xf0
 8000d80:	039b      	lsls	r3, r3, #14
 8000d82:	401a      	ands	r2, r3
 8000d84:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_ADC_Init+0x344>)
 8000d86:	430a      	orrs	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f7ff fdf6 	bl	8000986 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da2:	493a      	ldr	r1, [pc, #232]	; (8000e8c <HAL_ADC_Init+0x34c>)
 8000da4:	001a      	movs	r2, r3
 8000da6:	f7ff fdee 	bl	8000986 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d109      	bne.n	8000dc6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4249      	negs	r1, r1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8000dc4:	e018      	b.n	8000df8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	039b      	lsls	r3, r3, #14
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d112      	bne.n	8000df8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	221c      	movs	r2, #28
 8000de2:	4013      	ands	r3, r2
 8000de4:	2210      	movs	r2, #16
 8000de6:	4252      	negs	r2, r2
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0011      	movs	r1, r2
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff fdde 	bl	80009c0 <LL_ADC_GetSamplingTimeCommonChannels>
 8000e04:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d10b      	bne.n	8000e26 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e24:	e01c      	b.n	8000e60 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	2212      	movs	r2, #18
 8000e2c:	4393      	bics	r3, r2
 8000e2e:	2210      	movs	r2, #16
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e42:	231f      	movs	r3, #31
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e4a:	e009      	b.n	8000e60 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e50:	2210      	movs	r2, #16
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e58:	231f      	movs	r3, #31
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000e60:	231f      	movs	r3, #31
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	781b      	ldrb	r3, [r3, #0]
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b008      	add	sp, #32
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	20000000 	.word	0x20000000
 8000e74:	00030d40 	.word	0x00030d40
 8000e78:	fffffefd 	.word	0xfffffefd
 8000e7c:	fffe0201 	.word	0xfffe0201
 8000e80:	1ffffc02 	.word	0x1ffffc02
 8000e84:	40012708 	.word	0x40012708
 8000e88:	ffc3ffff 	.word	0xffc3ffff
 8000e8c:	07ffff04 	.word	0x07ffff04

08000e90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9a:	2317      	movs	r3, #23
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2254      	movs	r2, #84	; 0x54
 8000eaa:	5c9b      	ldrb	r3, [r3, r2]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x24>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e1c0      	b.n	8001236 <HAL_ADC_ConfigChannel+0x3a6>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2254      	movs	r2, #84	; 0x54
 8000eb8:	2101      	movs	r1, #1
 8000eba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fe2c 	bl	8000b1e <LL_ADC_REG_IsConversionOngoing>
 8000ec6:	1e03      	subs	r3, r0, #0
 8000ec8:	d000      	beq.n	8000ecc <HAL_ADC_ConfigChannel+0x3c>
 8000eca:	e1a3      	b.n	8001214 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d100      	bne.n	8000ed6 <HAL_ADC_ConfigChannel+0x46>
 8000ed4:	e143      	b.n	800115e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	061b      	lsls	r3, r3, #24
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d004      	beq.n	8000eec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000ee6:	4ac1      	ldr	r2, [pc, #772]	; (80011ec <HAL_ADC_ConfigChannel+0x35c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d108      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	f7ff fd99 	bl	8000a2e <LL_ADC_REG_SetSequencerChAdd>
 8000efc:	e0c9      	b.n	8001092 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	211f      	movs	r1, #31
 8000f08:	400b      	ands	r3, r1
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	4099      	lsls	r1, r3
 8000f0e:	000b      	movs	r3, r1
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4013      	ands	r3, r2
 8000f14:	0019      	movs	r1, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	035b      	lsls	r3, r3, #13
 8000f1c:	0b5b      	lsrs	r3, r3, #13
 8000f1e:	d105      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x9c>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0e9b      	lsrs	r3, r3, #26
 8000f26:	221f      	movs	r2, #31
 8000f28:	4013      	ands	r3, r2
 8000f2a:	e098      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4013      	ands	r3, r2
 8000f34:	d000      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0xa8>
 8000f36:	e091      	b.n	800105c <HAL_ADC_ConfigChannel+0x1cc>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d000      	beq.n	8000f44 <HAL_ADC_ConfigChannel+0xb4>
 8000f42:	e089      	b.n	8001058 <HAL_ADC_ConfigChannel+0x1c8>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d000      	beq.n	8000f50 <HAL_ADC_ConfigChannel+0xc0>
 8000f4e:	e081      	b.n	8001054 <HAL_ADC_ConfigChannel+0x1c4>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2208      	movs	r2, #8
 8000f56:	4013      	ands	r3, r2
 8000f58:	d000      	beq.n	8000f5c <HAL_ADC_ConfigChannel+0xcc>
 8000f5a:	e079      	b.n	8001050 <HAL_ADC_ConfigChannel+0x1c0>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2210      	movs	r2, #16
 8000f62:	4013      	ands	r3, r2
 8000f64:	d000      	beq.n	8000f68 <HAL_ADC_ConfigChannel+0xd8>
 8000f66:	e071      	b.n	800104c <HAL_ADC_ConfigChannel+0x1bc>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d000      	beq.n	8000f74 <HAL_ADC_ConfigChannel+0xe4>
 8000f72:	e069      	b.n	8001048 <HAL_ADC_ConfigChannel+0x1b8>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2240      	movs	r2, #64	; 0x40
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d000      	beq.n	8000f80 <HAL_ADC_ConfigChannel+0xf0>
 8000f7e:	e061      	b.n	8001044 <HAL_ADC_ConfigChannel+0x1b4>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	4013      	ands	r3, r2
 8000f88:	d000      	beq.n	8000f8c <HAL_ADC_ConfigChannel+0xfc>
 8000f8a:	e059      	b.n	8001040 <HAL_ADC_ConfigChannel+0x1b0>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4013      	ands	r3, r2
 8000f96:	d151      	bne.n	800103c <HAL_ADC_ConfigChannel+0x1ac>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d149      	bne.n	8001038 <HAL_ADC_ConfigChannel+0x1a8>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4013      	ands	r3, r2
 8000fae:	d141      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x1a4>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d139      	bne.n	8001030 <HAL_ADC_ConfigChannel+0x1a0>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d131      	bne.n	800102c <HAL_ADC_ConfigChannel+0x19c>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	019b      	lsls	r3, r3, #6
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d129      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x198>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	01db      	lsls	r3, r3, #7
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d121      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x194>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d119      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x190>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d111      	bne.n	800101c <HAL_ADC_ConfigChannel+0x18c>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	029b      	lsls	r3, r3, #10
 8001000:	4013      	ands	r3, r2
 8001002:	d109      	bne.n	8001018 <HAL_ADC_ConfigChannel+0x188>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	02db      	lsls	r3, r3, #11
 800100c:	4013      	ands	r3, r2
 800100e:	d001      	beq.n	8001014 <HAL_ADC_ConfigChannel+0x184>
 8001010:	2312      	movs	r3, #18
 8001012:	e024      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001014:	2300      	movs	r3, #0
 8001016:	e022      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001018:	2311      	movs	r3, #17
 800101a:	e020      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 800101c:	2310      	movs	r3, #16
 800101e:	e01e      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001020:	230f      	movs	r3, #15
 8001022:	e01c      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001024:	230e      	movs	r3, #14
 8001026:	e01a      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001028:	230d      	movs	r3, #13
 800102a:	e018      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 800102c:	230c      	movs	r3, #12
 800102e:	e016      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001030:	230b      	movs	r3, #11
 8001032:	e014      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001034:	230a      	movs	r3, #10
 8001036:	e012      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001038:	2309      	movs	r3, #9
 800103a:	e010      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 800103c:	2308      	movs	r3, #8
 800103e:	e00e      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001040:	2307      	movs	r3, #7
 8001042:	e00c      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001044:	2306      	movs	r3, #6
 8001046:	e00a      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001048:	2305      	movs	r3, #5
 800104a:	e008      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 800104c:	2304      	movs	r3, #4
 800104e:	e006      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001050:	2303      	movs	r3, #3
 8001052:	e004      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_ADC_ConfigChannel+0x1ce>
 800105c:	2300      	movs	r3, #0
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	6852      	ldr	r2, [r2, #4]
 8001062:	201f      	movs	r0, #31
 8001064:	4002      	ands	r2, r0
 8001066:	4093      	lsls	r3, r2
 8001068:	000a      	movs	r2, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	429a      	cmp	r2, r3
 800107e:	d808      	bhi.n	8001092 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	6859      	ldr	r1, [r3, #4]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	001a      	movs	r2, r3
 800108e:	f7ff fcae 	bl	80009ee <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	001a      	movs	r2, r3
 80010a0:	f7ff fce8 	bl	8000a74 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db00      	blt.n	80010ae <HAL_ADC_ConfigChannel+0x21e>
 80010ac:	e0bc      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010ae:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_ADC_ConfigChannel+0x360>)
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff fc5b 	bl	800096c <LL_ADC_GetCommonPathInternalCh>
 80010b6:	0003      	movs	r3, r0
 80010b8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a4d      	ldr	r2, [pc, #308]	; (80011f4 <HAL_ADC_ConfigChannel+0x364>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d122      	bne.n	800110a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010cc:	d11d      	bne.n	800110a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	0412      	lsls	r2, r2, #16
 80010d4:	4313      	orrs	r3, r2
 80010d6:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <HAL_ADC_ConfigChannel+0x360>)
 80010d8:	0019      	movs	r1, r3
 80010da:	0010      	movs	r0, r2
 80010dc:	f7ff fc32 	bl	8000944 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010e0:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <HAL_ADC_ConfigChannel+0x368>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4945      	ldr	r1, [pc, #276]	; (80011fc <HAL_ADC_ConfigChannel+0x36c>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff f80c 	bl	8000104 <__udivsi3>
 80010ec:	0003      	movs	r3, r0
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	0013      	movs	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80010fa:	e002      	b.n	8001102 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3b01      	subs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f9      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001108:	e08e      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a3c      	ldr	r2, [pc, #240]	; (8001200 <HAL_ADC_ConfigChannel+0x370>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d10e      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	045b      	lsls	r3, r3, #17
 800111a:	4013      	ands	r3, r2
 800111c:	d109      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	0452      	lsls	r2, r2, #17
 8001124:	4313      	orrs	r3, r2
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_ADC_ConfigChannel+0x360>)
 8001128:	0019      	movs	r1, r3
 800112a:	0010      	movs	r0, r2
 800112c:	f7ff fc0a 	bl	8000944 <LL_ADC_SetCommonPathInternalCh>
 8001130:	e07a      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_ADC_ConfigChannel+0x374>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d000      	beq.n	800113e <HAL_ADC_ConfigChannel+0x2ae>
 800113c:	e074      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	03db      	lsls	r3, r3, #15
 8001144:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001146:	d000      	beq.n	800114a <HAL_ADC_ConfigChannel+0x2ba>
 8001148:	e06e      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	03d2      	lsls	r2, r2, #15
 8001150:	4313      	orrs	r3, r2
 8001152:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <HAL_ADC_ConfigChannel+0x360>)
 8001154:	0019      	movs	r1, r3
 8001156:	0010      	movs	r0, r2
 8001158:	f7ff fbf4 	bl	8000944 <LL_ADC_SetCommonPathInternalCh>
 800115c:	e064      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691a      	ldr	r2, [r3, #16]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	061b      	lsls	r3, r3, #24
 8001166:	429a      	cmp	r2, r3
 8001168:	d004      	beq.n	8001174 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800116e:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <HAL_ADC_ConfigChannel+0x35c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d107      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0019      	movs	r1, r3
 800117e:	0010      	movs	r0, r2
 8001180:	f7ff fc66 	bl	8000a50 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	da4d      	bge.n	8001228 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_ADC_ConfigChannel+0x360>)
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fbec 	bl	800096c <LL_ADC_GetCommonPathInternalCh>
 8001194:	0003      	movs	r3, r0
 8001196:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <HAL_ADC_ConfigChannel+0x364>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d108      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_ADC_ConfigChannel+0x378>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_ADC_ConfigChannel+0x360>)
 80011aa:	0019      	movs	r1, r3
 80011ac:	0010      	movs	r0, r2
 80011ae:	f7ff fbc9 	bl	8000944 <LL_ADC_SetCommonPathInternalCh>
 80011b2:	e039      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_ADC_ConfigChannel+0x370>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d108      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_ADC_ConfigChannel+0x37c>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_ADC_ConfigChannel+0x360>)
 80011c6:	0019      	movs	r1, r3
 80011c8:	0010      	movs	r0, r2
 80011ca:	f7ff fbbb 	bl	8000944 <LL_ADC_SetCommonPathInternalCh>
 80011ce:	e02b      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <HAL_ADC_ConfigChannel+0x374>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d126      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_ADC_ConfigChannel+0x380>)
 80011de:	4013      	ands	r3, r2
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <HAL_ADC_ConfigChannel+0x360>)
 80011e2:	0019      	movs	r1, r3
 80011e4:	0010      	movs	r0, r2
 80011e6:	f7ff fbad 	bl	8000944 <LL_ADC_SetCommonPathInternalCh>
 80011ea:	e01d      	b.n	8001228 <HAL_ADC_ConfigChannel+0x398>
 80011ec:	80000004 	.word	0x80000004
 80011f0:	40012708 	.word	0x40012708
 80011f4:	b0001000 	.word	0xb0001000
 80011f8:	20000000 	.word	0x20000000
 80011fc:	00030d40 	.word	0x00030d40
 8001200:	b8004000 	.word	0xb8004000
 8001204:	b4002000 	.word	0xb4002000
 8001208:	ff7fffff 	.word	0xff7fffff
 800120c:	feffffff 	.word	0xfeffffff
 8001210:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	2220      	movs	r2, #32
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001220:	2317      	movs	r3, #23
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2254      	movs	r2, #84	; 0x54
 800122c:	2100      	movs	r1, #0
 800122e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001230:	2317      	movs	r3, #23
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	781b      	ldrb	r3, [r3, #0]
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b006      	add	sp, #24
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	0002      	movs	r2, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b7f      	cmp	r3, #127	; 0x7f
 8001254:	d828      	bhi.n	80012a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001256:	4a2f      	ldr	r2, [pc, #188]	; (8001314 <__NVIC_SetPriority+0xd4>)
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b25b      	sxtb	r3, r3
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	33c0      	adds	r3, #192	; 0xc0
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	589b      	ldr	r3, [r3, r2]
 8001266:	1dfa      	adds	r2, r7, #7
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	0011      	movs	r1, r2
 800126c:	2203      	movs	r2, #3
 800126e:	400a      	ands	r2, r1
 8001270:	00d2      	lsls	r2, r2, #3
 8001272:	21ff      	movs	r1, #255	; 0xff
 8001274:	4091      	lsls	r1, r2
 8001276:	000a      	movs	r2, r1
 8001278:	43d2      	mvns	r2, r2
 800127a:	401a      	ands	r2, r3
 800127c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	401a      	ands	r2, r3
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	0018      	movs	r0, r3
 800128c:	2303      	movs	r3, #3
 800128e:	4003      	ands	r3, r0
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001294:	481f      	ldr	r0, [pc, #124]	; (8001314 <__NVIC_SetPriority+0xd4>)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	430a      	orrs	r2, r1
 80012a0:	33c0      	adds	r3, #192	; 0xc0
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012a6:	e031      	b.n	800130c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <__NVIC_SetPriority+0xd8>)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	0019      	movs	r1, r3
 80012b0:	230f      	movs	r3, #15
 80012b2:	400b      	ands	r3, r1
 80012b4:	3b08      	subs	r3, #8
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3306      	adds	r3, #6
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	18d3      	adds	r3, r2, r3
 80012be:	3304      	adds	r3, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1dfa      	adds	r2, r7, #7
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	0011      	movs	r1, r2
 80012c8:	2203      	movs	r2, #3
 80012ca:	400a      	ands	r2, r1
 80012cc:	00d2      	lsls	r2, r2, #3
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	4091      	lsls	r1, r2
 80012d2:	000a      	movs	r2, r1
 80012d4:	43d2      	mvns	r2, r2
 80012d6:	401a      	ands	r2, r3
 80012d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	401a      	ands	r2, r3
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	0018      	movs	r0, r3
 80012e8:	2303      	movs	r3, #3
 80012ea:	4003      	ands	r3, r0
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <__NVIC_SetPriority+0xd8>)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	001c      	movs	r4, r3
 80012f8:	230f      	movs	r3, #15
 80012fa:	4023      	ands	r3, r4
 80012fc:	3b08      	subs	r3, #8
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	430a      	orrs	r2, r1
 8001302:	3306      	adds	r3, #6
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	18c3      	adds	r3, r0, r3
 8001308:	3304      	adds	r3, #4
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b003      	add	sp, #12
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1e5a      	subs	r2, r3, #1
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	045b      	lsls	r3, r3, #17
 800132c:	429a      	cmp	r2, r3
 800132e:	d301      	bcc.n	8001334 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001330:	2301      	movs	r3, #1
 8001332:	e010      	b.n	8001356 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <SysTick_Config+0x44>)
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	3a01      	subs	r2, #1
 800133a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133c:	2301      	movs	r3, #1
 800133e:	425b      	negs	r3, r3
 8001340:	2103      	movs	r1, #3
 8001342:	0018      	movs	r0, r3
 8001344:	f7ff ff7c 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x44>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x44>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	210f      	movs	r1, #15
 8001370:	187b      	adds	r3, r7, r1
 8001372:	1c02      	adds	r2, r0, #0
 8001374:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	187b      	adds	r3, r7, r1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	0011      	movs	r1, r2
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ffbf 	bl	800131c <SysTick_Config>
 800139e:	0003      	movs	r3, r0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e14e      	b.n	8001658 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	225c      	movs	r2, #92	; 0x5c
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d107      	bne.n	80013d6 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	225d      	movs	r2, #93	; 0x5d
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff f93f 	bl	8000654 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2110      	movs	r1, #16
 80013e2:	438a      	bics	r2, r1
 80013e4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e6:	f7ff fa7f 	bl	80008e8 <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013ee:	e012      	b.n	8001416 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013f0:	f7ff fa7a 	bl	80008e8 <HAL_GetTick>
 80013f4:	0002      	movs	r2, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b0a      	cmp	r3, #10
 80013fc:	d90b      	bls.n	8001416 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	2201      	movs	r2, #1
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	225c      	movs	r2, #92	; 0x5c
 800140e:	2103      	movs	r1, #3
 8001410:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e120      	b.n	8001658 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2208      	movs	r2, #8
 800141e:	4013      	ands	r3, r2
 8001420:	2b08      	cmp	r3, #8
 8001422:	d0e5      	beq.n	80013f0 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2101      	movs	r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001434:	f7ff fa58 	bl	80008e8 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800143c:	e012      	b.n	8001464 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800143e:	f7ff fa53 	bl	80008e8 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b0a      	cmp	r3, #10
 800144a:	d90b      	bls.n	8001464 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001450:	2201      	movs	r2, #1
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	225c      	movs	r2, #92	; 0x5c
 800145c:	2103      	movs	r1, #3
 800145e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0f9      	b.n	8001658 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2201      	movs	r2, #1
 800146c:	4013      	ands	r3, r2
 800146e:	d0e6      	beq.n	800143e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2102      	movs	r1, #2
 800147c:	430a      	orrs	r2, r1
 800147e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a76      	ldr	r2, [pc, #472]	; (8001660 <HAL_FDCAN_Init+0x2b8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d103      	bne.n	8001492 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800148a:	4a76      	ldr	r2, [pc, #472]	; (8001664 <HAL_FDCAN_Init+0x2bc>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7c1b      	ldrb	r3, [r3, #16]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	699a      	ldr	r2, [r3, #24]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	438a      	bics	r2, r1
 80014a8:	619a      	str	r2, [r3, #24]
 80014aa:	e007      	b.n	80014bc <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699a      	ldr	r2, [r3, #24]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	430a      	orrs	r2, r1
 80014ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7c5b      	ldrb	r3, [r3, #17]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d109      	bne.n	80014d8 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	01c9      	lsls	r1, r1, #7
 80014d2:	430a      	orrs	r2, r1
 80014d4:	619a      	str	r2, [r3, #24]
 80014d6:	e007      	b.n	80014e8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4961      	ldr	r1, [pc, #388]	; (8001668 <HAL_FDCAN_Init+0x2c0>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7c9b      	ldrb	r3, [r3, #18]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d108      	bne.n	8001502 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	495c      	ldr	r1, [pc, #368]	; (800166c <HAL_FDCAN_Init+0x2c4>)
 80014fc:	400a      	ands	r2, r1
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	e008      	b.n	8001514 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	0149      	lsls	r1, r1, #5
 8001510:	430a      	orrs	r2, r1
 8001512:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a55      	ldr	r2, [pc, #340]	; (8001670 <HAL_FDCAN_Init+0x2c8>)
 800151c:	4013      	ands	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	21a4      	movs	r1, #164	; 0xa4
 8001538:	438a      	bics	r2, r1
 800153a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2110      	movs	r1, #16
 8001548:	438a      	bics	r2, r1
 800154a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2104      	movs	r1, #4
 8001560:	430a      	orrs	r2, r1
 8001562:	619a      	str	r2, [r3, #24]
 8001564:	e02c      	b.n	80015c0 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d028      	beq.n	80015c0 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d01c      	beq.n	80015b0 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	430a      	orrs	r2, r1
 8001584:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2110      	movs	r1, #16
 8001592:	430a      	orrs	r2, r1
 8001594:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d110      	bne.n	80015c0 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699a      	ldr	r2, [r3, #24]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2120      	movs	r1, #32
 80015aa:	430a      	orrs	r2, r1
 80015ac:	619a      	str	r2, [r3, #24]
 80015ae:	e007      	b.n	80015c0 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2120      	movs	r1, #32
 80015bc:	430a      	orrs	r2, r1
 80015be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015d8:	431a      	orrs	r2, r3
 80015da:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	23c0      	movs	r3, #192	; 0xc0
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d115      	bne.n	8001624 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	3b01      	subs	r3, #1
 8001604:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001606:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	3b01      	subs	r3, #1
 800160e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001610:	431a      	orrs	r2, r3
 8001612:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	3b01      	subs	r3, #1
 800161a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001620:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001622:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	22c0      	movs	r2, #192	; 0xc0
 800162a:	5899      	ldr	r1, [r3, r2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	21c0      	movs	r1, #192	; 0xc0
 8001638:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	0018      	movs	r0, r3
 800163e:	f000 f85f 	bl	8001700 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	225c      	movs	r2, #92	; 0x5c
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40006400 	.word	0x40006400
 8001664:	40006500 	.word	0x40006500
 8001668:	ffffbfff 	.word	0xffffbfff
 800166c:	ffffefff 	.word	0xffffefff
 8001670:	fffffcff 	.word	0xfffffcff

08001674 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	225c      	movs	r2, #92	; 0x5c
 8001684:	5c9b      	ldrb	r3, [r3, r2]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d12d      	bne.n	80016e8 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	22c4      	movs	r2, #196	; 0xc4
 8001692:	589a      	ldr	r2, [r3, r2]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	039b      	lsls	r3, r3, #14
 8001698:	4013      	ands	r3, r2
 800169a:	d008      	beq.n	80016ae <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	431a      	orrs	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e023      	b.n	80016f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	22c4      	movs	r2, #196	; 0xc4
 80016b4:	589b      	ldr	r3, [r3, r2]
 80016b6:	0c1b      	lsrs	r3, r3, #16
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f887 	bl	80017d8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2101      	movs	r1, #1
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4091      	lsls	r1, r2
 80016d4:	000a      	movs	r2, r1
 80016d6:	21cc      	movs	r1, #204	; 0xcc
 80016d8:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80016da:	2201      	movs	r2, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e006      	b.n	80016f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ec:	2208      	movs	r2, #8
 80016ee:	431a      	orrs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
  }
}
 80016f6:	0018      	movs	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b006      	add	sp, #24
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 800170a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d105      	bne.n	8001722 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	22d4      	movs	r2, #212	; 0xd4
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4694      	mov	ip, r2
 800171e:	4463      	add	r3, ip
 8001720:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	589b      	ldr	r3, [r3, r2]
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173a:	041a      	lsls	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3370      	adds	r3, #112	; 0x70
 800174a:	001a      	movs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	589b      	ldr	r3, [r3, r2]
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800175a:	4013      	ands	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	061a      	lsls	r2, r3, #24
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	33b0      	adds	r3, #176	; 0xb0
 8001772:	001a      	movs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3389      	adds	r3, #137	; 0x89
 800177c:	33ff      	adds	r3, #255	; 0xff
 800177e:	001a      	movs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2298      	movs	r2, #152	; 0x98
 8001788:	0092      	lsls	r2, r2, #2
 800178a:	189a      	adds	r2, r3, r2
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	229e      	movs	r2, #158	; 0x9e
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	189a      	adds	r2, r3, r2
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e005      	b.n	80017ae <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3304      	adds	r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	22d4      	movs	r2, #212	; 0xd4
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	4694      	mov	ip, r2
 80017b6:	4463      	add	r3, ip
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3f1      	bcc.n	80017a2 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b004      	add	sp, #16
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	4000b400 	.word	0x4000b400
 80017cc:	40006800 	.word	0x40006800
 80017d0:	ffe0ffff 	.word	0xffe0ffff
 80017d4:	f0ffffff 	.word	0xf0ffffff

080017d8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80017f6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80017fe:	4313      	orrs	r3, r2
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	e00b      	b.n	800181c <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800180c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001812:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	05d2      	lsls	r2, r2, #23
 8001818:	4313      	orrs	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001826:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800182c:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001832:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	0013      	movs	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	189b      	adds	r3, r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	18cb      	adds	r3, r1, r3
 800184c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	3304      	adds	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	3304      	adds	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e020      	b.n	80018ae <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3303      	adds	r3, #3
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	18d3      	adds	r3, r2, r3
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3302      	adds	r3, #2
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	18cb      	adds	r3, r1, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001884:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	18cb      	adds	r3, r1, r3
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001892:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	188a      	adds	r2, r1, r2
 800189a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800189c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	3304      	adds	r3, #4
 80018a6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3304      	adds	r3, #4
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	4a05      	ldr	r2, [pc, #20]	; (80018cc <FDCAN_CopyMessageToRAM+0xf4>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	001a      	movs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	4293      	cmp	r3, r2
 80018be:	d3d5      	bcc.n	800186c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b008      	add	sp, #32
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	08002b60 	.word	0x08002b60

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	e14d      	b.n	8001b7c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2101      	movs	r1, #1
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4091      	lsls	r1, r2
 80018ea:	000a      	movs	r2, r1
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d100      	bne.n	80018f8 <HAL_GPIO_Init+0x28>
 80018f6:	e13e      	b.n	8001b76 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2203      	movs	r2, #3
 80018fe:	4013      	ands	r3, r2
 8001900:	2b01      	cmp	r3, #1
 8001902:	d005      	beq.n	8001910 <HAL_GPIO_Init+0x40>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	4013      	ands	r3, r2
 800190c:	2b02      	cmp	r3, #2
 800190e:	d130      	bne.n	8001972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	409a      	lsls	r2, r3
 800191e:	0013      	movs	r3, r2
 8001920:	43da      	mvns	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001946:	2201      	movs	r2, #1
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	43da      	mvns	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	2201      	movs	r2, #1
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2203      	movs	r2, #3
 8001978:	4013      	ands	r3, r2
 800197a:	2b03      	cmp	r3, #3
 800197c:	d017      	beq.n	80019ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	409a      	lsls	r2, r3
 800198c:	0013      	movs	r3, r2
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d123      	bne.n	8001a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	58d3      	ldr	r3, [r2, r3]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2207      	movs	r2, #7
 80019cc:	4013      	ands	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	220f      	movs	r2, #15
 80019d2:	409a      	lsls	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	43da      	mvns	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2107      	movs	r1, #7
 80019e6:	400b      	ands	r3, r1
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	43da      	mvns	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2203      	movs	r2, #3
 8001a20:	401a      	ands	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	23c0      	movs	r3, #192	; 0xc0
 8001a3c:	029b      	lsls	r3, r3, #10
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d100      	bne.n	8001a44 <HAL_GPIO_Init+0x174>
 8001a42:	e098      	b.n	8001b76 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a44:	4a53      	ldr	r2, [pc, #332]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3318      	adds	r3, #24
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	589b      	ldr	r3, [r3, r2]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	43da      	mvns	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	23a0      	movs	r3, #160	; 0xa0
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x1d6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a48      	ldr	r2, [pc, #288]	; (8001b98 <HAL_GPIO_Init+0x2c8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x1d2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a47      	ldr	r2, [pc, #284]	; (8001b9c <HAL_GPIO_Init+0x2cc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x1ce>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a46      	ldr	r2, [pc, #280]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x1ca>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a45      	ldr	r2, [pc, #276]	; (8001ba4 <HAL_GPIO_Init+0x2d4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x1c6>
 8001a92:	2304      	movs	r3, #4
 8001a94:	e008      	b.n	8001aa8 <HAL_GPIO_Init+0x1d8>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x1d8>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_Init+0x1d8>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_Init+0x1d8>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x1d8>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	2103      	movs	r1, #3
 8001aac:	400a      	ands	r2, r1
 8001aae:	00d2      	lsls	r2, r2, #3
 8001ab0:	4093      	lsls	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ab8:	4936      	ldr	r1, [pc, #216]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3318      	adds	r3, #24
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac6:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	035b      	lsls	r3, r3, #13
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43da      	mvns	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	039b      	lsls	r3, r3, #14
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b1a:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001b1c:	2384      	movs	r3, #132	; 0x84
 8001b1e:	58d3      	ldr	r3, [r2, r3]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43da      	mvns	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b40:	4914      	ldr	r1, [pc, #80]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001b42:	2284      	movs	r2, #132	; 0x84
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	58d3      	ldr	r3, [r2, r3]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43da      	mvns	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	4013      	ands	r3, r2
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b6e:	4909      	ldr	r1, [pc, #36]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	40da      	lsrs	r2, r3
 8001b84:	1e13      	subs	r3, r2, #0
 8001b86:	d000      	beq.n	8001b8a <HAL_GPIO_Init+0x2ba>
 8001b88:	e6aa      	b.n	80018e0 <HAL_GPIO_Init+0x10>
  }
}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b006      	add	sp, #24
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021800 	.word	0x40021800
 8001b98:	50000400 	.word	0x50000400
 8001b9c:	50000800 	.word	0x50000800
 8001ba0:	50000c00 	.word	0x50000c00
 8001ba4:	50001000 	.word	0x50001000

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	0008      	movs	r0, r1
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	1cbb      	adds	r3, r7, #2
 8001bb6:	1c02      	adds	r2, r0, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	1c7b      	adds	r3, r7, #1
 8001bbc:	1c0a      	adds	r2, r1, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc0:	1c7b      	adds	r3, r7, #1
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d004      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc8:	1cbb      	adds	r3, r7, #2
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd2:	1cbb      	adds	r3, r7, #2
 8001bd4:	881a      	ldrh	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d11f      	bne.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	189b      	adds	r3, r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4912      	ldr	r1, [pc, #72]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7fe fa74 	bl	8000104 <__udivsi3>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c22:	e008      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e001      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e009      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	401a      	ands	r2, r3
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d0ed      	beq.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40007000 	.word	0x40007000
 8001c58:	fffff9ff 	.word	0xfffff9ff
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	000f4240 	.word	0x000f4240

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f000 fb50 	bl	8002318 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d100      	bne.n	8001c84 <HAL_RCC_OscConfig+0x20>
 8001c82:	e07c      	b.n	8001d7e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c84:	4bc3      	ldr	r3, [pc, #780]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2238      	movs	r2, #56	; 0x38
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8e:	4bc1      	ldr	r3, [pc, #772]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2203      	movs	r2, #3
 8001c94:	4013      	ands	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x40>
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d002      	beq.n	8001caa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001caa:	4bba      	ldr	r3, [pc, #744]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d062      	beq.n	8001d7c <HAL_RCC_OscConfig+0x118>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d15e      	bne.n	8001d7c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e32a      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_OscConfig+0x7a>
 8001cce:	4bb1      	ldr	r3, [pc, #708]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4bb0      	ldr	r3, [pc, #704]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0249      	lsls	r1, r1, #9
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e020      	b.n	8001d20 <HAL_RCC_OscConfig+0xbc>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	23a0      	movs	r3, #160	; 0xa0
 8001ce4:	02db      	lsls	r3, r3, #11
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d10e      	bne.n	8001d08 <HAL_RCC_OscConfig+0xa4>
 8001cea:	4baa      	ldr	r3, [pc, #680]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4ba9      	ldr	r3, [pc, #676]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	02c9      	lsls	r1, r1, #11
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	4ba6      	ldr	r3, [pc, #664]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4ba5      	ldr	r3, [pc, #660]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	0249      	lsls	r1, r1, #9
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xbc>
 8001d08:	4ba2      	ldr	r3, [pc, #648]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4ba1      	ldr	r3, [pc, #644]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d0e:	49a2      	ldr	r1, [pc, #648]	; (8001f98 <HAL_RCC_OscConfig+0x334>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	4b9f      	ldr	r3, [pc, #636]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b9e      	ldr	r3, [pc, #632]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d1a:	49a0      	ldr	r1, [pc, #640]	; (8001f9c <HAL_RCC_OscConfig+0x338>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d014      	beq.n	8001d52 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7fe fdde 	bl	80008e8 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d32:	f7fe fdd9 	bl	80008e8 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	; 0x64
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e2e9      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d44:	4b93      	ldr	r3, [pc, #588]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0xce>
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7fe fdc9 	bl	80008e8 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7fe fdc4 	bl	80008e8 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e2d4      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6e:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	4013      	ands	r3, r2
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0xf8>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x126>
 8001d88:	e099      	b.n	8001ebe <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8a:	4b82      	ldr	r3, [pc, #520]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2238      	movs	r2, #56	; 0x38
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d94:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_OscConfig+0x146>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d135      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db0:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4013      	ands	r3, r2
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x164>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e2a7      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a74      	ldr	r2, [pc, #464]	; (8001fa0 <HAL_RCC_OscConfig+0x33c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	021a      	lsls	r2, r3, #8
 8001dd8:	4b6e      	ldr	r3, [pc, #440]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d112      	bne.n	8001e0a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001de4:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <HAL_RCC_OscConfig+0x340>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0adb      	lsrs	r3, r3, #11
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	4a69      	ldr	r2, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x344>)
 8001e04:	40da      	lsrs	r2, r3
 8001e06:	4b69      	ldr	r3, [pc, #420]	; (8001fac <HAL_RCC_OscConfig+0x348>)
 8001e08:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e0a:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <HAL_RCC_OscConfig+0x34c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7fe fd0e 	bl	8000830 <HAL_InitTick>
 8001e14:	1e03      	subs	r3, r0, #0
 8001e16:	d051      	beq.n	8001ebc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e27d      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d030      	beq.n	8001e86 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e24:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a5e      	ldr	r2, [pc, #376]	; (8001fa4 <HAL_RCC_OscConfig+0x340>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e38:	4b56      	ldr	r3, [pc, #344]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b55      	ldr	r3, [pc, #340]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0049      	lsls	r1, r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7fe fd4f 	bl	80008e8 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7fe fd4a 	bl	80008e8 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e25a      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <HAL_RCC_OscConfig+0x33c>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	021a      	lsls	r2, r3, #8
 8001e7e:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	e01b      	b.n	8001ebe <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e8c:	4949      	ldr	r1, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x350>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7fe fd29 	bl	80008e8 <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fd24 	bl	80008e8 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e234      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x238>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ebc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d047      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ec8:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2238      	movs	r2, #56	; 0x38
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b18      	cmp	r3, #24
 8001ed2:	d10a      	bne.n	8001eea <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d03c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2f4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d138      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e216      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d019      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ef4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ef6:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	430a      	orrs	r2, r1
 8001efc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7fe fcf3 	bl	80008e8 <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7fe fcee 	bl	80008e8 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1fe      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d0f1      	beq.n	8001f08 <HAL_RCC_OscConfig+0x2a4>
 8001f24:	e018      	b.n	8001f58 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	438a      	bics	r2, r1
 8001f30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe fcd9 	bl	80008e8 <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7fe fcd4 	bl	80008e8 <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1e4      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d1f1      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d100      	bne.n	8001f64 <HAL_RCC_OscConfig+0x300>
 8001f62:	e0c7      	b.n	80020f4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f64:	231f      	movs	r3, #31
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2238      	movs	r2, #56	; 0x38
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d11f      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d100      	bne.n	8001f84 <HAL_RCC_OscConfig+0x320>
 8001f82:	e0b7      	b.n	80020f4 <HAL_RCC_OscConfig+0x490>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d000      	beq.n	8001f8e <HAL_RCC_OscConfig+0x32a>
 8001f8c:	e0b2      	b.n	80020f4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1c2      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	40021000 	.word	0x40021000
 8001f98:	fffeffff 	.word	0xfffeffff
 8001f9c:	fffbffff 	.word	0xfffbffff
 8001fa0:	ffff80ff 	.word	0xffff80ff
 8001fa4:	ffffc7ff 	.word	0xffffc7ff
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fb8:	4bb5      	ldr	r3, [pc, #724]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8001fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	055b      	lsls	r3, r3, #21
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x364>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x366>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d011      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4bb0      	ldr	r3, [pc, #704]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8001fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd2:	4baf      	ldr	r3, [pc, #700]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0549      	lsls	r1, r1, #21
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fdc:	4bac      	ldr	r3, [pc, #688]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8001fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001fea:	231f      	movs	r3, #31
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff2:	4ba8      	ldr	r3, [pc, #672]	; (8002294 <HAL_RCC_OscConfig+0x630>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d11a      	bne.n	8002034 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffe:	4ba5      	ldr	r3, [pc, #660]	; (8002294 <HAL_RCC_OscConfig+0x630>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4ba4      	ldr	r3, [pc, #656]	; (8002294 <HAL_RCC_OscConfig+0x630>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0049      	lsls	r1, r1, #1
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800200c:	f7fe fc6c 	bl	80008e8 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002016:	f7fe fc67 	bl	80008e8 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e177      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	4b9a      	ldr	r3, [pc, #616]	; (8002294 <HAL_RCC_OscConfig+0x630>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4013      	ands	r3, r2
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x3e6>
 800203c:	4b94      	ldr	r3, [pc, #592]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800203e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002040:	4b93      	ldr	r3, [pc, #588]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002042:	2101      	movs	r1, #1
 8002044:	430a      	orrs	r2, r1
 8002046:	65da      	str	r2, [r3, #92]	; 0x5c
 8002048:	e01c      	b.n	8002084 <HAL_RCC_OscConfig+0x420>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b05      	cmp	r3, #5
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x408>
 8002052:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002054:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002056:	4b8e      	ldr	r3, [pc, #568]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002058:	2104      	movs	r1, #4
 800205a:	430a      	orrs	r2, r1
 800205c:	65da      	str	r2, [r3, #92]	; 0x5c
 800205e:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002060:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002062:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002064:	2101      	movs	r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0x420>
 800206c:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800206e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002070:	4b87      	ldr	r3, [pc, #540]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002072:	2101      	movs	r1, #1
 8002074:	438a      	bics	r2, r1
 8002076:	65da      	str	r2, [r3, #92]	; 0x5c
 8002078:	4b85      	ldr	r3, [pc, #532]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800207a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800207c:	4b84      	ldr	r3, [pc, #528]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800207e:	2104      	movs	r1, #4
 8002080:	438a      	bics	r2, r1
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d014      	beq.n	80020b6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fc2c 	bl	80008e8 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002094:	e009      	b.n	80020aa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fc27 	bl	80008e8 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a7d      	ldr	r2, [pc, #500]	; (8002298 <HAL_RCC_OscConfig+0x634>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e136      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	4b79      	ldr	r3, [pc, #484]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x432>
 80020b4:	e013      	b.n	80020de <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe fc17 	bl	80008e8 <HAL_GetTick>
 80020ba:	0003      	movs	r3, r0
 80020bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020be:	e009      	b.n	80020d4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7fe fc12 	bl	80008e8 <HAL_GetTick>
 80020c4:	0002      	movs	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	4a73      	ldr	r2, [pc, #460]	; (8002298 <HAL_RCC_OscConfig+0x634>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e121      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d4:	4b6e      	ldr	r3, [pc, #440]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2202      	movs	r2, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020de:	231f      	movs	r3, #31
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d105      	bne.n	80020f4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80020e8:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 80020ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ec:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 80020ee:	496b      	ldr	r1, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x638>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2220      	movs	r2, #32
 80020fa:	4013      	ands	r3, r2
 80020fc:	d039      	beq.n	8002172 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01b      	beq.n	800213e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002106:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	03c9      	lsls	r1, r1, #15
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fbe8 	bl	80008e8 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211e:	f7fe fbe3 	bl	80008e8 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0f3      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002130:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	041b      	lsls	r3, r3, #16
 8002138:	4013      	ands	r3, r2
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x4ba>
 800213c:	e019      	b.n	8002172 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002144:	4956      	ldr	r1, [pc, #344]	; (80022a0 <HAL_RCC_OscConfig+0x63c>)
 8002146:	400a      	ands	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214a:	f7fe fbcd 	bl	80008e8 <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002154:	f7fe fbc8 	bl	80008e8 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0d8      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	041b      	lsls	r3, r3, #16
 800216e:	4013      	ands	r3, r2
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d100      	bne.n	800217c <HAL_RCC_OscConfig+0x518>
 800217a:	e0cc      	b.n	8002316 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217c:	4b44      	ldr	r3, [pc, #272]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2238      	movs	r2, #56	; 0x38
 8002182:	4013      	ands	r3, r2
 8002184:	2b10      	cmp	r3, #16
 8002186:	d100      	bne.n	800218a <HAL_RCC_OscConfig+0x526>
 8002188:	e07b      	b.n	8002282 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d156      	bne.n	8002240 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002198:	4942      	ldr	r1, [pc, #264]	; (80022a4 <HAL_RCC_OscConfig+0x640>)
 800219a:	400a      	ands	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7fe fba3 	bl	80008e8 <HAL_GetTick>
 80021a2:	0003      	movs	r3, r0
 80021a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7fe fb9e 	bl	80008e8 <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0ae      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ba:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	049b      	lsls	r3, r3, #18
 80021c2:	4013      	ands	r3, r2
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4a37      	ldr	r2, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x644>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	431a      	orrs	r2, r3
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0449      	lsls	r1, r1, #17
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	0549      	lsls	r1, r1, #21
 8002212:	430a      	orrs	r2, r1
 8002214:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7fe fb67 	bl	80008e8 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fb62 	bl	80008e8 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e072      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	049b      	lsls	r3, r3, #18
 800223a:	4013      	ands	r3, r2
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x5bc>
 800223e:	e06a      	b.n	8002316 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002246:	4917      	ldr	r1, [pc, #92]	; (80022a4 <HAL_RCC_OscConfig+0x640>)
 8002248:	400a      	ands	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fb4c 	bl	80008e8 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fb47 	bl	80008e8 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e057      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	049b      	lsls	r3, r3, #18
 8002270:	4013      	ands	r3, r2
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_OscConfig+0x62c>)
 800227a:	490c      	ldr	r1, [pc, #48]	; (80022ac <HAL_RCC_OscConfig+0x648>)
 800227c:	400a      	ands	r2, r1
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	e049      	b.n	8002316 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d112      	bne.n	80022b0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e044      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
 8002298:	00001388 	.word	0x00001388
 800229c:	efffffff 	.word	0xefffffff
 80022a0:	ffbfffff 	.word	0xffbfffff
 80022a4:	feffffff 	.word	0xfeffffff
 80022a8:	11c1808c 	.word	0x11c1808c
 80022ac:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x6bc>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2203      	movs	r2, #3
 80022ba:	401a      	ands	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d126      	bne.n	8002312 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2270      	movs	r2, #112	; 0x70
 80022c8:	401a      	ands	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d11f      	bne.n	8002312 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	23fe      	movs	r3, #254	; 0xfe
 80022d6:	01db      	lsls	r3, r3, #7
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d116      	bne.n	8002312 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	23f8      	movs	r3, #248	; 0xf8
 80022e8:	039b      	lsls	r3, r3, #14
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d10e      	bne.n	8002312 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	23e0      	movs	r3, #224	; 0xe0
 80022f8:	051b      	lsls	r3, r3, #20
 80022fa:	401a      	ands	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	0f5b      	lsrs	r3, r3, #29
 8002308:	075a      	lsls	r2, r3, #29
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b008      	add	sp, #32
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0e9      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_ClockConfig+0x1f0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2207      	movs	r2, #7
 800233e:	4013      	ands	r3, r2
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d91e      	bls.n	8002384 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2207      	movs	r2, #7
 800234c:	4393      	bics	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	4b70      	ldr	r3, [pc, #448]	; (8002514 <HAL_RCC_ClockConfig+0x1f0>)
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002358:	f7fe fac6 	bl	80008e8 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002360:	e009      	b.n	8002376 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002362:	f7fe fac1 	bl	80008e8 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	4a6a      	ldr	r2, [pc, #424]	; (8002518 <HAL_RCC_ClockConfig+0x1f4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0ca      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002376:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2207      	movs	r2, #7
 800237c:	4013      	ands	r3, r2
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d1ee      	bne.n	8002362 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2202      	movs	r2, #2
 800238a:	4013      	ands	r3, r2
 800238c:	d015      	beq.n	80023ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2204      	movs	r2, #4
 8002394:	4013      	ands	r3, r2
 8002396:	d006      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002398:	4b60      	ldr	r3, [pc, #384]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 800239e:	21e0      	movs	r1, #224	; 0xe0
 80023a0:	01c9      	lsls	r1, r1, #7
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a6:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <HAL_RCC_ClockConfig+0x1fc>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	d057      	beq.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	029b      	lsls	r3, r3, #10
 80023d4:	4013      	ands	r3, r2
 80023d6:	d12b      	bne.n	8002430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e097      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e4:	4b4d      	ldr	r3, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	049b      	lsls	r3, r3, #18
 80023ec:	4013      	ands	r3, r2
 80023ee:	d11f      	bne.n	8002430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e08b      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fc:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4013      	ands	r3, r2
 8002406:	d113      	bne.n	8002430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e07f      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d106      	bne.n	8002422 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 8002416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002418:	2202      	movs	r2, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d108      	bne.n	8002430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e074      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e06d      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002430:	4b3a      	ldr	r3, [pc, #232]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2207      	movs	r2, #7
 8002436:	4393      	bics	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe fa50 	bl	80008e8 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244c:	e009      	b.n	8002462 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244e:	f7fe fa4b 	bl	80008e8 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	4a2f      	ldr	r2, [pc, #188]	; (8002518 <HAL_RCC_ClockConfig+0x1f4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e054      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2238      	movs	r2, #56	; 0x38
 8002468:	401a      	ands	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	429a      	cmp	r2, r3
 8002472:	d1ec      	bne.n	800244e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2207      	movs	r2, #7
 800247a:	4013      	ands	r3, r2
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d21e      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2207      	movs	r2, #7
 8002488:	4393      	bics	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_ClockConfig+0x1f0>)
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002494:	f7fe fa28 	bl	80008e8 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800249c:	e009      	b.n	80024b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249e:	f7fe fa23 	bl	80008e8 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_RCC_ClockConfig+0x1f4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e02c      	b.n	800250c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2207      	movs	r2, #7
 80024b8:	4013      	ands	r3, r2
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2204      	movs	r2, #4
 80024c6:	4013      	ands	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_RCC_ClockConfig+0x200>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024de:	f000 f829 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024e2:	0001      	movs	r1, r0
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_RCC_ClockConfig+0x1f8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	220f      	movs	r2, #15
 80024ec:	401a      	ands	r2, r3
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_RCC_ClockConfig+0x204>)
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	58d3      	ldr	r3, [r2, r3]
 80024f4:	221f      	movs	r2, #31
 80024f6:	4013      	ands	r3, r2
 80024f8:	000a      	movs	r2, r1
 80024fa:	40da      	lsrs	r2, r3
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x208>)
 80024fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x20c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe f993 	bl	8000830 <HAL_InitTick>
 800250a:	0003      	movs	r3, r0
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b004      	add	sp, #16
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40022000 	.word	0x40022000
 8002518:	00001388 	.word	0x00001388
 800251c:	40021000 	.word	0x40021000
 8002520:	fffff0ff 	.word	0xfffff0ff
 8002524:	ffff8fff 	.word	0xffff8fff
 8002528:	08002b20 	.word	0x08002b20
 800252c:	20000000 	.word	0x20000000
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253a:	4b3c      	ldr	r3, [pc, #240]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2238      	movs	r2, #56	; 0x38
 8002540:	4013      	ands	r3, r2
 8002542:	d10f      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002544:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0adb      	lsrs	r3, r3, #11
 800254a:	2207      	movs	r2, #7
 800254c:	4013      	ands	r3, r2
 800254e:	2201      	movs	r2, #1
 8002550:	409a      	lsls	r2, r3
 8002552:	0013      	movs	r3, r2
 8002554:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002556:	6839      	ldr	r1, [r7, #0]
 8002558:	4835      	ldr	r0, [pc, #212]	; (8002630 <HAL_RCC_GetSysClockFreq+0xfc>)
 800255a:	f7fd fdd3 	bl	8000104 <__udivsi3>
 800255e:	0003      	movs	r3, r0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e05d      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002564:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2238      	movs	r2, #56	; 0x38
 800256a:	4013      	ands	r3, r2
 800256c:	2b08      	cmp	r3, #8
 800256e:	d102      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_RCC_GetSysClockFreq+0x100>)
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e054      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2238      	movs	r2, #56	; 0x38
 800257c:	4013      	ands	r3, r2
 800257e:	2b10      	cmp	r3, #16
 8002580:	d138      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2203      	movs	r2, #3
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	2207      	movs	r2, #7
 8002594:	4013      	ands	r3, r2
 8002596:	3301      	adds	r3, #1
 8002598:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d10d      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4824      	ldr	r0, [pc, #144]	; (8002634 <HAL_RCC_GetSysClockFreq+0x100>)
 80025a4:	f7fd fdae 	bl	8000104 <__udivsi3>
 80025a8:	0003      	movs	r3, r0
 80025aa:	0019      	movs	r1, r3
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	227f      	movs	r2, #127	; 0x7f
 80025b4:	4013      	ands	r3, r2
 80025b6:	434b      	muls	r3, r1
 80025b8:	617b      	str	r3, [r7, #20]
        break;
 80025ba:	e00d      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	481c      	ldr	r0, [pc, #112]	; (8002630 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025c0:	f7fd fda0 	bl	8000104 <__udivsi3>
 80025c4:	0003      	movs	r3, r0
 80025c6:	0019      	movs	r1, r3
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	227f      	movs	r2, #127	; 0x7f
 80025d0:	4013      	ands	r3, r2
 80025d2:	434b      	muls	r3, r1
 80025d4:	617b      	str	r3, [r7, #20]
        break;
 80025d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0f5b      	lsrs	r3, r3, #29
 80025de:	2207      	movs	r2, #7
 80025e0:	4013      	ands	r3, r2
 80025e2:	3301      	adds	r3, #1
 80025e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	6978      	ldr	r0, [r7, #20]
 80025ea:	f7fd fd8b 	bl	8000104 <__udivsi3>
 80025ee:	0003      	movs	r3, r0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	e015      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2238      	movs	r2, #56	; 0x38
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d103      	bne.n	8002608 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_RCC_GetSysClockFreq+0xf8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2238      	movs	r2, #56	; 0x38
 800260e:	4013      	ands	r3, r2
 8002610:	2b18      	cmp	r3, #24
 8002612:	d103      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002614:	23fa      	movs	r3, #250	; 0xfa
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e001      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002620:	693b      	ldr	r3, [r7, #16]
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b006      	add	sp, #24
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	40021000 	.word	0x40021000
 8002630:	00f42400 	.word	0x00f42400
 8002634:	007a1200 	.word	0x007a1200

08002638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002640:	2313      	movs	r3, #19
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002648:	2312      	movs	r3, #18
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	029b      	lsls	r3, r3, #10
 8002658:	4013      	ands	r3, r2
 800265a:	d100      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800265c:	e0ad      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2011      	movs	r0, #17
 8002660:	183b      	adds	r3, r7, r0
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	055b      	lsls	r3, r3, #21
 800266e:	4013      	ands	r3, r2
 8002670:	d110      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0549      	lsls	r1, r1, #21
 800267c:	430a      	orrs	r2, r1
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002680:	4b40      	ldr	r3, [pc, #256]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	055b      	lsls	r3, r3, #21
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	183b      	adds	r3, r7, r0
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002694:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	0049      	lsls	r1, r1, #1
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a2:	f7fe f921 	bl	80008e8 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026aa:	e00b      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe f91c 	bl	80008e8 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d904      	bls.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80026ba:	2313      	movs	r3, #19
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	2203      	movs	r2, #3
 80026c0:	701a      	strb	r2, [r3, #0]
        break;
 80026c2:	e005      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4013      	ands	r3, r2
 80026ce:	d0ed      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80026d0:	2313      	movs	r3, #19
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d15e      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026de:	23c0      	movs	r3, #192	; 0xc0
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d019      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d014      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	4a24      	ldr	r2, [pc, #144]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002702:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002704:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	0249      	lsls	r1, r1, #9
 800270a:	430a      	orrs	r2, r1
 800270c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002710:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002714:	491e      	ldr	r1, [pc, #120]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002716:	400a      	ands	r2, r1
 8002718:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	d016      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe f8de 	bl	80008e8 <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002730:	e00c      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe f8d9 	bl	80008e8 <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	4a15      	ldr	r2, [pc, #84]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d904      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002742:	2313      	movs	r3, #19
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2203      	movs	r2, #3
 8002748:	701a      	strb	r2, [r3, #0]
            break;
 800274a:	e004      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d0ed      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002756:	2313      	movs	r3, #19
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002766:	4013      	ands	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002770:	430a      	orrs	r2, r1
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c
 8002774:	e016      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002776:	2312      	movs	r3, #18
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	2213      	movs	r2, #19
 800277c:	18ba      	adds	r2, r7, r2
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e00f      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
 800278c:	fffffcff 	.word	0xfffffcff
 8002790:	fffeffff 	.word	0xfffeffff
 8002794:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002798:	2312      	movs	r3, #18
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2213      	movs	r2, #19
 800279e:	18ba      	adds	r2, r7, r2
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027a4:	2311      	movs	r3, #17
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ae:	4bb6      	ldr	r3, [pc, #728]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b2:	4bb5      	ldr	r3, [pc, #724]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027b4:	49b5      	ldr	r1, [pc, #724]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c4:	4bb0      	ldr	r3, [pc, #704]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	2203      	movs	r2, #3
 80027ca:	4393      	bics	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4bad      	ldr	r3, [pc, #692]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2202      	movs	r2, #2
 80027de:	4013      	ands	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e2:	4ba9      	ldr	r3, [pc, #676]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	220c      	movs	r2, #12
 80027e8:	4393      	bics	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4ba5      	ldr	r3, [pc, #660]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2204      	movs	r2, #4
 80027fc:	4013      	ands	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002800:	4ba1      	ldr	r3, [pc, #644]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	2230      	movs	r2, #48	; 0x30
 8002806:	4393      	bics	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b9e      	ldr	r3, [pc, #632]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002810:	430a      	orrs	r2, r1
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2210      	movs	r2, #16
 800281a:	4013      	ands	r3, r2
 800281c:	d009      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800281e:	4b9a      	ldr	r3, [pc, #616]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	4a9b      	ldr	r2, [pc, #620]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	4b96      	ldr	r3, [pc, #600]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800282e:	430a      	orrs	r2, r1
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	015b      	lsls	r3, r3, #5
 800283a:	4013      	ands	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800283e:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	4a94      	ldr	r2, [pc, #592]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	4b8e      	ldr	r3, [pc, #568]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800284e:	430a      	orrs	r2, r1
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285e:	4b8a      	ldr	r3, [pc, #552]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	4a8d      	ldr	r2, [pc, #564]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286c:	4b86      	ldr	r3, [pc, #536]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800286e:	430a      	orrs	r2, r1
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4013      	ands	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	4a86      	ldr	r2, [pc, #536]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002884:	4013      	ands	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288c:	4b7e      	ldr	r3, [pc, #504]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800288e:	430a      	orrs	r2, r1
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2220      	movs	r2, #32
 8002898:	4013      	ands	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800289c:	4b7a      	ldr	r3, [pc, #488]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	4a7f      	ldr	r2, [pc, #508]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	4b77      	ldr	r3, [pc, #476]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	4013      	ands	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ba:	4b73      	ldr	r3, [pc, #460]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	4a79      	ldr	r2, [pc, #484]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	01db      	lsls	r3, r3, #7
 80028d6:	4013      	ands	r3, r2
 80028d8:	d015      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028da:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	0899      	lsrs	r1, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e6:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028e8:	430a      	orrs	r2, r1
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	05db      	lsls	r3, r3, #23
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028f8:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0249      	lsls	r1, r1, #9
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	031b      	lsls	r3, r3, #12
 800290e:	4013      	ands	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002912:	4b5d      	ldr	r3, [pc, #372]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002922:	430a      	orrs	r2, r1
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	039b      	lsls	r3, r3, #14
 800292e:	4013      	ands	r3, r2
 8002930:	d016      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002932:	4b55      	ldr	r3, [pc, #340]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	4a5c      	ldr	r2, [pc, #368]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002938:	4013      	ands	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002940:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002942:	430a      	orrs	r2, r1
 8002944:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	03db      	lsls	r3, r3, #15
 800294e:	429a      	cmp	r2, r3
 8002950:	d106      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002952:	4b4d      	ldr	r3, [pc, #308]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	0449      	lsls	r1, r1, #17
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	03db      	lsls	r3, r3, #15
 8002968:	4013      	ands	r3, r2
 800296a:	d016      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800296c:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002972:	4013      	ands	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800297a:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800297c:	430a      	orrs	r2, r1
 800297e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	045b      	lsls	r3, r3, #17
 8002988:	429a      	cmp	r2, r3
 800298a:	d106      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800298c:	4b3e      	ldr	r3, [pc, #248]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	0449      	lsls	r1, r1, #17
 8002996:	430a      	orrs	r2, r1
 8002998:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4013      	ands	r3, r2
 80029a4:	d014      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	2203      	movs	r2, #3
 80029ac:	4393      	bics	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1a      	ldr	r2, [r3, #32]
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d106      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	0249      	lsls	r1, r1, #9
 80029cc:	430a      	orrs	r2, r1
 80029ce:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	019b      	lsls	r3, r3, #6
 80029d8:	4013      	ands	r3, r2
 80029da:	d014      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	220c      	movs	r2, #12
 80029e2:	4393      	bics	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ea:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029ec:	430a      	orrs	r2, r1
 80029ee:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d106      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	0249      	lsls	r1, r1, #9
 8002a02:	430a      	orrs	r2, r1
 8002a04:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	045b      	lsls	r3, r3, #17
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d016      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	019b      	lsls	r3, r3, #6
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d106      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	0449      	lsls	r1, r1, #17
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	049b      	lsls	r3, r3, #18
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d016      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	4a10      	ldr	r2, [pc, #64]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	0449      	lsls	r1, r1, #17
 8002a76:	430a      	orrs	r2, r1
 8002a78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a7a:	2312      	movs	r3, #18
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b006      	add	sp, #24
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	efffffff 	.word	0xefffffff
 8002a90:	fffff3ff 	.word	0xfffff3ff
 8002a94:	fffffcff 	.word	0xfffffcff
 8002a98:	fff3ffff 	.word	0xfff3ffff
 8002a9c:	ffcfffff 	.word	0xffcfffff
 8002aa0:	ffffcfff 	.word	0xffffcfff
 8002aa4:	ffff3fff 	.word	0xffff3fff
 8002aa8:	ffbfffff 	.word	0xffbfffff
 8002aac:	feffffff 	.word	0xfeffffff

08002ab0 <__libc_init_array>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	2600      	movs	r6, #0
 8002ab4:	4d0c      	ldr	r5, [pc, #48]	; (8002ae8 <__libc_init_array+0x38>)
 8002ab6:	4c0d      	ldr	r4, [pc, #52]	; (8002aec <__libc_init_array+0x3c>)
 8002ab8:	1b64      	subs	r4, r4, r5
 8002aba:	10a4      	asrs	r4, r4, #2
 8002abc:	42a6      	cmp	r6, r4
 8002abe:	d109      	bne.n	8002ad4 <__libc_init_array+0x24>
 8002ac0:	2600      	movs	r6, #0
 8002ac2:	f000 f821 	bl	8002b08 <_init>
 8002ac6:	4d0a      	ldr	r5, [pc, #40]	; (8002af0 <__libc_init_array+0x40>)
 8002ac8:	4c0a      	ldr	r4, [pc, #40]	; (8002af4 <__libc_init_array+0x44>)
 8002aca:	1b64      	subs	r4, r4, r5
 8002acc:	10a4      	asrs	r4, r4, #2
 8002ace:	42a6      	cmp	r6, r4
 8002ad0:	d105      	bne.n	8002ade <__libc_init_array+0x2e>
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	00b3      	lsls	r3, r6, #2
 8002ad6:	58eb      	ldr	r3, [r5, r3]
 8002ad8:	4798      	blx	r3
 8002ada:	3601      	adds	r6, #1
 8002adc:	e7ee      	b.n	8002abc <__libc_init_array+0xc>
 8002ade:	00b3      	lsls	r3, r6, #2
 8002ae0:	58eb      	ldr	r3, [r5, r3]
 8002ae2:	4798      	blx	r3
 8002ae4:	3601      	adds	r6, #1
 8002ae6:	e7f2      	b.n	8002ace <__libc_init_array+0x1e>
 8002ae8:	08002b70 	.word	0x08002b70
 8002aec:	08002b70 	.word	0x08002b70
 8002af0:	08002b70 	.word	0x08002b70
 8002af4:	08002b74 	.word	0x08002b74

08002af8 <memset>:
 8002af8:	0003      	movs	r3, r0
 8002afa:	1882      	adds	r2, r0, r2
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d100      	bne.n	8002b02 <memset+0xa>
 8002b00:	4770      	bx	lr
 8002b02:	7019      	strb	r1, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	e7f9      	b.n	8002afc <memset+0x4>

08002b08 <_init>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr

08002b14 <_fini>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr
